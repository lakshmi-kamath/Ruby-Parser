
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BREAK DO END EQUAL GREATER ID IF LESSER LOOP MINUS MINUSEQUAL NUMBER PLUS PLUSEQUAL PUTS STRING WHILEs : LOOP DO statements END\n    statements : statement\n               | statements statement\n    \n    statement : assignment\n              | conditional\n              | BREAK\n              | puts_statement\n    \n    assignment : ID EQUAL NUMBER\n               | ID PLUSEQUAL NUMBER\n               | ID MINUSEQUAL NUMBER\n               | ID EQUAL ID PLUS NUMBER\n               | ID EQUAL ID MINUS NUMBER\n    \n    conditional : IF ID GREATER NUMBER\n                | IF ID EQUAL NUMBER\n                | IF ID LESSER NUMBER\n    \n    puts_statement : PUTS ID\n                     | PUTS STRING\n    '
    
_lr_action_items = {'LOOP':([0,],[2,]),'$end':([1,13,],[0,-1,]),'DO':([2,],[3,]),'BREAK':([3,4,5,6,7,8,9,14,19,20,22,23,24,30,31,32,33,34,],[8,8,-2,-4,-5,-6,-7,-3,-16,-17,-8,-9,-10,-13,-14,-15,-11,-12,]),'ID':([3,4,5,6,7,8,9,11,12,14,15,19,20,22,23,24,30,31,32,33,34,],[10,10,-2,-4,-5,-6,-7,18,19,-3,21,-16,-17,-8,-9,-10,-13,-14,-15,-11,-12,]),'IF':([3,4,5,6,7,8,9,14,19,20,22,23,24,30,31,32,33,34,],[11,11,-2,-4,-5,-6,-7,-3,-16,-17,-8,-9,-10,-13,-14,-15,-11,-12,]),'PUTS':([3,4,5,6,7,8,9,14,19,20,22,23,24,30,31,32,33,34,],[12,12,-2,-4,-5,-6,-7,-3,-16,-17,-8,-9,-10,-13,-14,-15,-11,-12,]),'END':([4,5,6,7,8,9,14,19,20,22,23,24,30,31,32,33,34,],[13,-2,-4,-5,-6,-7,-3,-16,-17,-8,-9,-10,-13,-14,-15,-11,-12,]),'EQUAL':([10,18,],[15,26,]),'PLUSEQUAL':([10,],[16,]),'MINUSEQUAL':([10,],[17,]),'STRING':([12,],[20,]),'NUMBER':([15,16,17,25,26,27,28,29,],[22,23,24,30,31,32,33,34,]),'GREATER':([18,],[25,]),'LESSER':([18,],[27,]),'PLUS':([21,],[28,]),'MINUS':([21,],[29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'s':([0,],[1,]),'statements':([3,],[4,]),'statement':([3,4,],[5,14,]),'assignment':([3,4,],[6,6,]),'conditional':([3,4,],[7,7,]),'puts_statement':([3,4,],[9,9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> s","S'",1,None,None,None),
  ('s -> LOOP DO statements END','s',4,'p_s','dowhile2.py',38),
  ('statements -> statement','statements',1,'p_statements','dowhile2.py',42),
  ('statements -> statements statement','statements',2,'p_statements','dowhile2.py',43),
  ('statement -> assignment','statement',1,'p_statement','dowhile2.py',48),
  ('statement -> conditional','statement',1,'p_statement','dowhile2.py',49),
  ('statement -> BREAK','statement',1,'p_statement','dowhile2.py',50),
  ('statement -> puts_statement','statement',1,'p_statement','dowhile2.py',51),
  ('assignment -> ID EQUAL NUMBER','assignment',3,'p_assignment','dowhile2.py',56),
  ('assignment -> ID PLUSEQUAL NUMBER','assignment',3,'p_assignment','dowhile2.py',57),
  ('assignment -> ID MINUSEQUAL NUMBER','assignment',3,'p_assignment','dowhile2.py',58),
  ('assignment -> ID EQUAL ID PLUS NUMBER','assignment',5,'p_assignment','dowhile2.py',59),
  ('assignment -> ID EQUAL ID MINUS NUMBER','assignment',5,'p_assignment','dowhile2.py',60),
  ('conditional -> IF ID GREATER NUMBER','conditional',4,'p_conditional','dowhile2.py',65),
  ('conditional -> IF ID EQUAL NUMBER','conditional',4,'p_conditional','dowhile2.py',66),
  ('conditional -> IF ID LESSER NUMBER','conditional',4,'p_conditional','dowhile2.py',67),
  ('puts_statement -> PUTS ID','puts_statement',2,'p_puts_statement','dowhile2.py',72),
  ('puts_statement -> PUTS STRING','puts_statement',2,'p_puts_statement','dowhile2.py',73),
]
